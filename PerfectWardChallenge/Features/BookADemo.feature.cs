// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PerfectWardChallenge.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BookADemo", Description="\tBook a demo button is available and enabled ", SourceFile="Features\\BookADemo.feature", SourceLine=0)]
    public partial class BookADemoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BookADemo.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BookADemo", "\tBook a demo button is available and enabled ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void BookADemoButtonIsAvailableAndEnabled(string page, string bookingPage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Page", page);
            argumentsOfScenario.Add("Booking Page", bookingPage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Book a demo button is available and enabled", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("a user has selected a \"{0}\" on the Perfect Ward Website", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("the user clicks the Book a Demo button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("the shoud be redirected to \"{0}\"", bookingPage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Book a demo button is available and enabled, ipc", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void BookADemoButtonIsAvailableAndEnabled_Ipc()
        {
#line 6
this.BookADemoButtonIsAvailableAndEnabled("ipc", "book-a-demo", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Book a demo button is available and enabled, features", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void BookADemoButtonIsAvailableAndEnabled_Features()
        {
#line 6
this.BookADemoButtonIsAvailableAndEnabled("features", "book-a-demo", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Book a demo button is available and enabled, our-solution", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void BookADemoButtonIsAvailableAndEnabled_Our_Solution()
        {
#line 6
this.BookADemoButtonIsAvailableAndEnabled("our-solution", "book-a-demo", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Book a demo button is available and enabled, resources", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void BookADemoButtonIsAvailableAndEnabled_Resources()
        {
#line 6
this.BookADemoButtonIsAvailableAndEnabled("resources", "book-a-demo", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Book a demo button is available and enabled, contact", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void BookADemoButtonIsAvailableAndEnabled_Contact()
        {
#line 6
this.BookADemoButtonIsAvailableAndEnabled("contact", "book-a-demo", ((string[])(null)));
#line hidden
        }
        
        public virtual void BookMyDemoButtonIsVisible(string page, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Page", page);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\"Book My Demo\" button is visible", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given(string.Format("a user has selected a \"{0}\" on the Perfect Ward Website", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.When("the user clicks the Book a Demo button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("the \"Book my demo!\" button is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("\"Book My Demo\" button is visible, ipc", SourceLine=27)]
        public virtual void BookMyDemoButtonIsVisible_Ipc()
        {
#line 22
 this.BookMyDemoButtonIsVisible("ipc", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("\"Book My Demo\" button is visible, features", SourceLine=27)]
        public virtual void BookMyDemoButtonIsVisible_Features()
        {
#line 22
 this.BookMyDemoButtonIsVisible("features", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("\"Book My Demo\" button is visible, our-solution", SourceLine=27)]
        public virtual void BookMyDemoButtonIsVisible_Our_Solution()
        {
#line 22
 this.BookMyDemoButtonIsVisible("our-solution", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("\"Book My Demo\" button is visible, resources", SourceLine=27)]
        public virtual void BookMyDemoButtonIsVisible_Resources()
        {
#line 22
 this.BookMyDemoButtonIsVisible("resources", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("\"Book My Demo\" button is visible, contact", SourceLine=27)]
        public virtual void BookMyDemoButtonIsVisible_Contact()
        {
#line 22
 this.BookMyDemoButtonIsVisible("contact", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
